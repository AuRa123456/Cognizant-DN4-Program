Hands-on 4: Difference between JPA, Hibernate, and Spring Data JPA

Java Persistence API (JPA)
- JPA is a Java specification (JSR 338) for accessing, persisting, and managing data between Java objects and relational databases.
- It is just an interface/specification and does not provide any concrete implementation.
- JPA requires a JPA provider (such as Hibernate or EclipseLink) for actual implementation.
- Commonly used classes include EntityManager, EntityTransaction, and Query.

Hibernate
- Hibernate is an Object Relational Mapping (ORM) tool that implements the JPA specification.
- It maps Java classes to database tables and manages the interaction with the database.
- Hibernate can be used with or without JPA.
- It provides additional features not covered by JPA, such as interceptors and caching.

Spring Data JPA
- Spring Data JPA is a Spring framework abstraction over JPA that simplifies the development of data access layers.
- It does not provide a JPA implementation itself but works with providers like Hibernate.
- It significantly reduces boilerplate code by offering repository interfaces such as JpaRepository.
- Spring Data JPA handles transactions automatically and offers convenient methods for data access and manipulation.

Code Comparison

Hibernate Style Code:

public Integer addEmployee(Employee employee) {
    Session session = factory.openSession();
    Transaction tx = null;
    Integer employeeID = null;

    try {
        tx = session.beginTransaction();
        employeeID = (Integer) session.save(employee);
        tx.commit();
    } catch (HibernateException e) {
        if (tx != null) tx.rollback();
        e.printStackTrace();
    } finally {
        session.close();
    }

    return employeeID;
}

Spring Data JPA Style Code:

Repository Layer:
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}

Service Layer:
@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Transactional
    public void addEmployee(Employee employee) {
        employeeRepository.save(employee);
    }
}

Summary Table:

Feature                     | JPA           | Hibernate      | Spring Data JPA
----------------------------|---------------|----------------|-----------------
Type                        | Specification | Implementation | Abstraction layer
Provides implementation?    | No            | Yes            | No (uses Hibernate)
Boilerplate                 | Medium        | High           | Very Low
Entity Mapping              | Yes           | Yes            | Yes
Transaction Management      | Manual        | Manual         | Automatic via @Transactional
Repository Support          | No            | No             | Yes via JpaRepository
Query Methods               | JPQL          | HQL, JPQL      | Derived Queries, JPQL, Native SQL
